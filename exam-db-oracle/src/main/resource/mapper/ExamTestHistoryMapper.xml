<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.test.exam.dao.ExamTestHistoryDao">
	<resultMap id="examTestHistoryMap" type="com.test.exam.domain.ExamTestHistory">
		<result property="testId" column="test_id" />
		<result property="testName" column="test_name" />
		<result property="addedBy" column="added_by" />
		<result property="addedDate" column="added_date" />
		<result property="updatedBy" column="updated_by" />
		<result property="updatedDate" column="updated_date" />
		<result property="status" column="status" />
		<result property="testUserId" column="test_userId" />
		<result property="testUserName" column="test_userName" />
		<result property="testUserScores" column="test_user_scores" />
	</resultMap>
	
	<insert id="insert"  parameterType="com.test.exam.domain.ExamTestHistory" >
		<selectKey keyProperty="testId" order="BEFORE" resultType="java.lang.String">
			select REPLACE(UUID(),'-','') as testId from dual
		</selectKey>
		insert into exam_test_history (
			test_id,
			test_name,
			added_by,
			added_date,
			updated_by,
			updated_date,
			status,
			test_userId,
			test_userName,
			test_user_scores
		)values(
			#{testId,jdbcType=VARCHAR},
			#{testName,jdbcType=VARCHAR},
			#{addedBy,jdbcType=VARCHAR},
			#{addedDate,jdbcType=VARCHAR},
			#{updatedBy,jdbcType=VARCHAR},
			#{updatedDate,jdbcType=VARCHAR},
			#{status,jdbcType=VARCHAR},
			#{testUserId,jdbcType=INTEGER},
			#{testUserName,jdbcType=VARCHAR},
			#{testUserScores,jdbcType=VARCHAR}
		)
	</insert>
	
	<insert id="insertList" parameterType="java.util.List">
		<selectKey keyProperty="testId" order="BEFORE" resultType="java.lang.String">
			select REPLACE(UUID(),'-','') as testId from dual
		</selectKey>
		insert into exam_test_history (
			test_id,
			test_name,
			added_by,
			added_date,
			updated_by,
			updated_date,
			status,
			test_userId,
			test_userName,
			test_user_scores
		) values
			<foreach collection="list" item="item" index="index" separator=",">
				(
					#{testId,jdbcType=VARCHAR},
					#{item.testName,jdbcType=VARCHAR},
					#{item.addedBy,jdbcType=VARCHAR},
					#{item.addedDate,jdbcType=VARCHAR},
					#{item.updatedBy,jdbcType=VARCHAR},
					#{item.updatedDate,jdbcType=VARCHAR},
					#{item.status,jdbcType=VARCHAR},
					#{item.testUserId,jdbcType=INTEGER},
					#{item.testUserName,jdbcType=VARCHAR},
					#{item.testUserScores,jdbcType=VARCHAR}
				)
		     </foreach>		
	</insert>
	
	<update id="update" parameterType="com.test.exam.domain.ExamTestHistory">
		update exam_test_history 
	    <set>
	        <if test="testName!=null">test_name=#{testName,jdbcType=VARCHAR},</if>
	        <if test="updatedBy!=null">updated_by=#{updatedBy,jdbcType=VARCHAR},</if>
	        <if test="updatedDate!=null">updated_date=#{updatedDate,jdbcType=VARCHAR}</if>
	        <if test="status!=null">status=#{status,jdbcType=VARCHAR}</if>
	    </set>
	    where  test_id=#{testId,jdbcType=VARCHAR}
	</update>
	
	<select id="get" resultMap="examTestHistoryMap" parameterType="com.test.exam.domain.ExamTestHistory">
		select * from exam_test_history where nvl(status,'A')='A'
		and test_id=#{testId,jdbcType=VARCHAR}
	</select>
	
	<select id="getList" resultMap="examTestHistoryMap" parameterType="com.test.exam.domain.ExamTestHistory">
		select * from exam_test_history where nvl(status,'A')='A' 
		 <if test="testUserId!=null">
		 	and test_userId=#{testUserId,jdbcType=INTEGER}
		 </if>
	</select>
	
</mapper>
